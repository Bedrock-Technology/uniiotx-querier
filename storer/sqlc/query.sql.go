// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
)

const createDailyManagerRewards = `-- name: CreateDailyManagerRewards :exec

INSERT INTO dailyManagerRewards (
    date, year, month, day, iotxRewards, uniIotxRewards, exchangeRatio
) VALUES (
          ?, ?, ?, ?, ?, ?, ?
         )
    RETURNING date, year, month, day, iotxrewards, uniiotxrewards, exchangeratio
`

type CreateDailyManagerRewardsParams struct {
	Date           int64
	Year           int64
	Month          int64
	Day            int64
	Iotxrewards    string
	Uniiotxrewards string
	Exchangeratio  string
}

// ---------------------------------------------------------------------------------------------------------------------
// Insert Data
// ---------------------------------------------------------------------------------------------------------------------
func (q *Queries) CreateDailyManagerRewards(ctx context.Context, arg CreateDailyManagerRewardsParams) error {
	_, err := q.db.ExecContext(ctx, createDailyManagerRewards,
		arg.Date,
		arg.Year,
		arg.Month,
		arg.Day,
		arg.Iotxrewards,
		arg.Uniiotxrewards,
		arg.Exchangeratio,
	)
	return err
}

const getDailyManagerRewards = `-- name: GetDailyManagerRewards :one

SELECT year, month, day, iotxRewards, uniIotxRewards, exchangeRatio
FROM dailyManagerRewards
WHERE date = ?
`

type GetDailyManagerRewardsRow struct {
	Year           int64
	Month          int64
	Day            int64
	Iotxrewards    string
	Uniiotxrewards string
	Exchangeratio  string
}

// ---------------------------------------------------------------------------------------------------------------------
// Get Data
// ---------------------------------------------------------------------------------------------------------------------
func (q *Queries) GetDailyManagerRewards(ctx context.Context, date int64) (GetDailyManagerRewardsRow, error) {
	row := q.db.QueryRowContext(ctx, getDailyManagerRewards, date)
	var i GetDailyManagerRewardsRow
	err := row.Scan(
		&i.Year,
		&i.Month,
		&i.Day,
		&i.Iotxrewards,
		&i.Uniiotxrewards,
		&i.Exchangeratio,
	)
	return i, err
}

const listDailyManagerRewardsByMonth = `-- name: ListDailyManagerRewardsByMonth :many
SELECT date, year, month, day, iotxRewards, uniIotxRewards, exchangeRatio
FROM dailyManagerRewards
WHERE year = ? AND month = ?
`

type ListDailyManagerRewardsByMonthParams struct {
	Year  int64
	Month int64
}

func (q *Queries) ListDailyManagerRewardsByMonth(ctx context.Context, arg ListDailyManagerRewardsByMonthParams) ([]DailyManagerReward, error) {
	rows, err := q.db.QueryContext(ctx, listDailyManagerRewardsByMonth, arg.Year, arg.Month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyManagerReward
	for rows.Next() {
		var i DailyManagerReward
		if err := rows.Scan(
			&i.Date,
			&i.Year,
			&i.Month,
			&i.Day,
			&i.Iotxrewards,
			&i.Uniiotxrewards,
			&i.Exchangeratio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDailyManagerRewardsByYear = `-- name: ListDailyManagerRewardsByYear :many

SELECT date, year, month, day, iotxRewards, uniIotxRewards, exchangeRatio
FROM dailyManagerRewards
WHERE year = ?
`

// ---------------------------------------------------------------------------------------------------------------------
// List Data
// ---------------------------------------------------------------------------------------------------------------------
func (q *Queries) ListDailyManagerRewardsByYear(ctx context.Context, year int64) ([]DailyManagerReward, error) {
	rows, err := q.db.QueryContext(ctx, listDailyManagerRewardsByYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyManagerReward
	for rows.Next() {
		var i DailyManagerReward
		if err := rows.Scan(
			&i.Date,
			&i.Year,
			&i.Month,
			&i.Day,
			&i.Iotxrewards,
			&i.Uniiotxrewards,
			&i.Exchangeratio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDailyManagerRewards = `-- name: UpdateDailyManagerRewards :exec

UPDATE dailyManagerRewards
set iotxRewards = ?,
    uniIotxRewards = ?,
    exchangeRatio = ?
WHERE date = ?
`

type UpdateDailyManagerRewardsParams struct {
	Iotxrewards    string
	Uniiotxrewards string
	Exchangeratio  string
	Date           int64
}

// ---------------------------------------------------------------------------------------------------------------------
// Update Data
// ---------------------------------------------------------------------------------------------------------------------
func (q *Queries) UpdateDailyManagerRewards(ctx context.Context, arg UpdateDailyManagerRewardsParams) error {
	_, err := q.db.ExecContext(ctx, updateDailyManagerRewards,
		arg.Iotxrewards,
		arg.Uniiotxrewards,
		arg.Exchangeratio,
		arg.Date,
	)
	return err
}
