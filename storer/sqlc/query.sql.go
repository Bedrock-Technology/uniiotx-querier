// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
)

const createDailyAssetStatistics = `-- name: CreateDailyAssetStatistics :exec

INSERT INTO dailyAssetStatistics (
    date, year, month, day, totalPending, totalStaked, totalDebts, exchangeRatio, managerRewards, managerRewardsUniIOTX, userRewards, userRewardsUniIOTX
) VALUES (
             ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
         )
    RETURNING date, year, month, day, totalpending, totalstaked, totaldebts, exchangeratio, managerrewards, managerrewardsuniiotx, userrewards, userrewardsuniiotx
`

type CreateDailyAssetStatisticsParams struct {
	Date                  int64
	Year                  int64
	Month                 int64
	Day                   int64
	Totalpending          string
	Totalstaked           string
	Totaldebts            string
	Exchangeratio         string
	Managerrewards        string
	Managerrewardsuniiotx string
	Userrewards           string
	Userrewardsuniiotx    string
}

// ---------------------------------------------------------------------------------------------------------------------
// Insert Data
// ---------------------------------------------------------------------------------------------------------------------
func (q *Queries) CreateDailyAssetStatistics(ctx context.Context, arg CreateDailyAssetStatisticsParams) error {
	_, err := q.db.ExecContext(ctx, createDailyAssetStatistics,
		arg.Date,
		arg.Year,
		arg.Month,
		arg.Day,
		arg.Totalpending,
		arg.Totalstaked,
		arg.Totaldebts,
		arg.Exchangeratio,
		arg.Managerrewards,
		arg.Managerrewardsuniiotx,
		arg.Userrewards,
		arg.Userrewardsuniiotx,
	)
	return err
}

const getDailyAssetStatistics = `-- name: GetDailyAssetStatistics :one

SELECT date, year, month, day, totalPending, totalStaked, totalDebts, exchangeRatio, managerRewards, managerRewardsUniIOTX, userRewards, userRewardsUniIOTX
FROM dailyAssetStatistics
WHERE date = ?
`

// ---------------------------------------------------------------------------------------------------------------------
// Get Data
// ---------------------------------------------------------------------------------------------------------------------
func (q *Queries) GetDailyAssetStatistics(ctx context.Context, date int64) (DailyAssetStatistic, error) {
	row := q.db.QueryRowContext(ctx, getDailyAssetStatistics, date)
	var i DailyAssetStatistic
	err := row.Scan(
		&i.Date,
		&i.Year,
		&i.Month,
		&i.Day,
		&i.Totalpending,
		&i.Totalstaked,
		&i.Totaldebts,
		&i.Exchangeratio,
		&i.Managerrewards,
		&i.Managerrewardsuniiotx,
		&i.Userrewards,
		&i.Userrewardsuniiotx,
	)
	return i, err
}

const listDailyAssetStatisticsByMonth = `-- name: ListDailyAssetStatisticsByMonth :many
SELECT date, year, month, day, totalPending, totalStaked, totalDebts, exchangeRatio, managerRewards, managerRewardsUniIOTX, userRewards, userRewardsUniIOTX
FROM dailyAssetStatistics
WHERE year = ? AND month = ?
`

type ListDailyAssetStatisticsByMonthParams struct {
	Year  int64
	Month int64
}

func (q *Queries) ListDailyAssetStatisticsByMonth(ctx context.Context, arg ListDailyAssetStatisticsByMonthParams) ([]DailyAssetStatistic, error) {
	rows, err := q.db.QueryContext(ctx, listDailyAssetStatisticsByMonth, arg.Year, arg.Month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyAssetStatistic
	for rows.Next() {
		var i DailyAssetStatistic
		if err := rows.Scan(
			&i.Date,
			&i.Year,
			&i.Month,
			&i.Day,
			&i.Totalpending,
			&i.Totalstaked,
			&i.Totaldebts,
			&i.Exchangeratio,
			&i.Managerrewards,
			&i.Managerrewardsuniiotx,
			&i.Userrewards,
			&i.Userrewardsuniiotx,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDailyAssetStatisticsByYear = `-- name: ListDailyAssetStatisticsByYear :many

SELECT date, year, month, day, totalPending, totalStaked, totalDebts, exchangeRatio, managerRewards, managerRewardsUniIOTX, userRewards, userRewardsUniIOTX
FROM dailyAssetStatistics
WHERE year = ?
`

// ---------------------------------------------------------------------------------------------------------------------
// List Data
// ---------------------------------------------------------------------------------------------------------------------
func (q *Queries) ListDailyAssetStatisticsByYear(ctx context.Context, year int64) ([]DailyAssetStatistic, error) {
	rows, err := q.db.QueryContext(ctx, listDailyAssetStatisticsByYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyAssetStatistic
	for rows.Next() {
		var i DailyAssetStatistic
		if err := rows.Scan(
			&i.Date,
			&i.Year,
			&i.Month,
			&i.Day,
			&i.Totalpending,
			&i.Totalstaked,
			&i.Totaldebts,
			&i.Exchangeratio,
			&i.Managerrewards,
			&i.Managerrewardsuniiotx,
			&i.Userrewards,
			&i.Userrewardsuniiotx,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDailyAssetStatistics = `-- name: UpdateDailyAssetStatistics :exec

UPDATE dailyAssetStatistics
set totalPending = ?,
    totalStaked = ?,
    totalDebts = ?,
    exchangeRatio = ?,
    managerRewards = ?,
    managerRewardsUniIOTX = ?,
    userRewards = ?,
    userRewardsUniIOTX = ?
WHERE date = ?
`

type UpdateDailyAssetStatisticsParams struct {
	Totalpending          string
	Totalstaked           string
	Totaldebts            string
	Exchangeratio         string
	Managerrewards        string
	Managerrewardsuniiotx string
	Userrewards           string
	Userrewardsuniiotx    string
	Date                  int64
}

// ---------------------------------------------------------------------------------------------------------------------
// Update Data
// ---------------------------------------------------------------------------------------------------------------------
func (q *Queries) UpdateDailyAssetStatistics(ctx context.Context, arg UpdateDailyAssetStatisticsParams) error {
	_, err := q.db.ExecContext(ctx, updateDailyAssetStatistics,
		arg.Totalpending,
		arg.Totalstaked,
		arg.Totaldebts,
		arg.Exchangeratio,
		arg.Managerrewards,
		arg.Managerrewardsuniiotx,
		arg.Userrewards,
		arg.Userrewardsuniiotx,
		arg.Date,
	)
	return err
}
